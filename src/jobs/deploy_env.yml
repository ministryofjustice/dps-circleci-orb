---
description: >
  Deploy via helm, using chart found in the helm_deploy dir of the repo.
  Optionally send a slack notification.
executor: default_small
parameters:
  env:
    type: string
    default: dev
  release_name:
    type: string
    default: ${CIRCLE_PROJECT_REPONAME}
  chart_name:
    type: string
    default: ${CIRCLE_PROJECT_REPONAME}
  helm_dir:
    type: string
    default: helm_deploy
  slack_notification:
    type: boolean
    default: false
    description: When true, notifies a Slack channel after every deployment done with this job.
  slack_channel_name:
    type: string
    default: dps-releases
    description: Slack channel to use for deployment notifications.
  helm_additional_args:
    type: string
    default: ""
  retrieve_secrets:
    type: string
    default: aws
steps:
  - checkout
  - k8s_setup
  - install_helm
  - install_aws_cli
  - mem/recall:
      env_var: APP_VERSION
  - deploy:
      name: Deploy to << parameters.env >>
      working_directory: << parameters.helm_dir >>
      command: |
        sed -i "s/appVersion: \".*\"/appVersion: \"${APP_VERSION}\"/g" << parameters.chart_name >>/Chart.yaml

        if [[ "<< parameters.retrieve_secrets >>" == 'aws' ]]; then
          aws secretsmanager get-secret-value --secret-id ${AWS_SECRET_NAME} | jq -r .SecretString | \
          helm upgrade << parameters.release_name >> << parameters.chart_name >> \
            --install --wait --reset-values --timeout 5m --history-max 10 \
            --values values-<< parameters.env >>.yaml \
            --values - \
            --set image.tag="${APP_VERSION}" \
            << parameters.helm_additional_args >>
        else
          helm upgrade << parameters.release_name >> << parameters.chart_name >> \
            --install --wait --reset-values --timeout 5m --history-max 10 \
            --values values-<< parameters.env >>.yaml \
            --set image.tag="${APP_VERSION}" \
            << parameters.helm_additional_args >>
        fi
  - when:
      condition: <<parameters.slack_notification>>
      steps:
        - slack/notify:
            event: always
            channel: << parameters.slack_channel_name >>
            custom: |
              {
                "blocks": [
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": ":circleci-${CCI_STATUS}: CircleCI deploy ${CCI_STATUS}"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*<< parameters.release_name >>* version `${APP_VERSION}` deploy to _<< parameters.env >>_"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View job"
                      },
                      "url": "$CIRCLE_BUILD_URL"
                    }
                  }
                ]
              }
