commands:
  create_app_version:
    description: Create new application version
    steps:
    - run:
        command: |
          DATE=$(date '+%Y-%m-%d')
          SHORT_SHA1=$(echo $CIRCLE_SHA1 | cut -c1-7)
          VERSION=${DATE}.${CIRCLE_BUILD_NUM}.${SHORT_SHA1}
          echo "Created version string: ${VERSION}"
          echo "export VERSION=$VERSION" >> $BASH_ENV
        name: Create app version string
    - mem/remember:
        env_var: APP_VERSION
        value: ${VERSION}
  k8s_setup:
    description: Install tools and configure kubectl
    steps:
    - aws-cli/install
    - kubernetes/install
    - helm/install-helm-client:
        version: v3.0.2
    - run:
        command: |
          echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
          kubectl config set-cluster "${KUBE_ENV_NAME}" \
            --certificate-authority="/tmp/cluster_ca.crt" \
            --server="https://api.${KUBE_ENV_NAME}"
          kubectl config set-credentials circleci \
            --token="${KUBE_ENV_TOKEN}"
          kubectl config set-context circleci \
            --cluster="${KUBE_ENV_NAME}" \
            --user="circleci" \
            --namespace="${KUBE_ENV_NAMESPACE}"
          # confirm setup is ok
          kubectl config use-context circleci
        name: Setup kubectl
description: |
  Ministry Of Justice - DPS Team orb - common circleci config
display:
  home_url: https://github.com/ministryofjustice/dps-circleci-orb
  source_url: https://github.com/ministryofjustice/dps-circleci-orb
examples:
  example:
    description: |
      CircleCI orb used to store common jobs/commands used by MoJ DPS team projects.
    usage:
      orbs:
        dps: ministryofjustice/dps@1.2.3
      version: 2.1
      workflows:
        build-test-and-deploy:
          jobs:
          - dps/build_docker:
              image_name: example_image_name
              name: build_docker
          - dps/deploy_to_env:
              app_name: example_app
              env: dev
              name: deploy_dev
              requires:
              - build_docker
executors:
  default:
    description: |
      Default executor for deployment jobs
    docker:
    - image: circleci/python:<<parameters.tag>>
    parameters:
      tag:
        default: "3"
        type: string
    working_directory: ~/app
jobs:
  build_docker:
    description: |
      Build docker image, also creates an app version string and pushes image to repo.
    executor: default
    parameters:
      image_name:
        type: string
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - create_app_version
    - run:
        command: |
          IMAGE_NAME="<< parameters.image_name >>"
          docker build --rm=false . \
            --build-arg BUILD_NUMBER=$APP_VERSION \
            --build-arg GIT_REF=$CIRCLE_SHA1 \
            --tag "<< parameters.image_name >>:${APP_VERSION}" \
            --label "maintainer=dps-hmpps@digital.justice.gov.uk" \
            --label "app.version=${APP_VERSION}" \
            --label "build.version=${APP_VERSION}" \
            --label "build.number=${CIRCLE_BUILD_NUM}" \
            --label "build.url=${CIRCLE_BUILD_URL}" \
            --label "build.gitref=${CIRCLE_SHA1}"

          # display build-info.json from image
          docker run -it --rm "<< parameters.image_name >>:${APP_VERSION}" cat /app/build-info.json

          #push to quay.io
          docker login -u="${QUAYIO_USERNAME}" -p="${QUAYIO_PASSWORD}" quay.io
          docker tag "<< parameters.image_name >>:${APP_VERSION}" "<< parameters.image_name >>:latest"
          docker push "<< parameters.image_name >>:${APP_VERSION}"
          docker push "<< parameters.image_name >>:latest"
        name: Build container and publish to docker hub
  deploy_env:
    description: |
      Deploy via helm, using chart found in the helm_deploy dir of the repo. Optionally send a slack notification.
    executor: default
    parameters:
      app_name:
        type: string
      env:
        type: string
      slack_notification:
        default: false
        type: boolean
    steps:
    - checkout
    - k8s_setup
    - mem/recall:
        env_var: APP_VERSION
    - deploy:
        command: |
          sed -i "s/appVersion: \".*\"/appVersion: \"${APP_VERSION}\"/g" helm_deploy/<< parameters.app_name >>/Chart.yaml
          aws secretsmanager get-secret-value --secret-id ${AWS_SECRET_NAME} | jq -r .SecretString | \
          helm upgrade << parameters.app_name >> helm_deploy/<< parameters.app_name >>/. \
            --install --wait --reset-values --timeout 5m --history-max 10 \
            --namespace=${KUBE_ENV_NAMESPACE} \
            --values helm_deploy/values-<< parameters.env >>.yaml \
            --values - \
            --set image.tag="${APP_VERSION}"
        name: Deploy to << parameters.env >>
        working_directory: ~/app
    - when:
        condition: <<parameters.slack_notification>>
        steps:
        - slack/notify:
            include_job_number_field: false
            include_project_field: false
            message: '*<< parameters.app_name >>* version:*${APP_VERSION}* deployed
              to << parameters.env >>'
orbs:
  aws-cli: circleci/aws-cli@0.1.18
  helm: circleci/helm@0.2.3
  kubernetes: circleci/kubernetes@0.10.1
  mem: circleci/rememborb@0.0.1
  slack: circleci/slack@3.4.2
version: 2.1

